{"version":3,"file":"static/js/81.3063ca9b.chunk.js","mappings":"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","sources":["../node_modules/@capacitor/filesystem/src/web.ts"],"sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\n\nimport type {\n  AppendFileOptions,\n  CopyOptions,\n  CopyResult,\n  DeleteFileOptions,\n  FilesystemPlugin,\n  GetUriOptions,\n  GetUriResult,\n  MkdirOptions,\n  PermissionStatus,\n  ReadFileOptions,\n  ReadFileResult,\n  ReaddirOptions,\n  ReaddirResult,\n  RenameOptions,\n  RmdirOptions,\n  StatOptions,\n  StatResult,\n  WriteFileOptions,\n  WriteFileResult,\n  Directory,\n  ReadFileInChunksOptions,\n  CallbackID,\n  DownloadFileOptions,\n  DownloadFileResult,\n  ProgressStatus,\n  ReadFileInChunksCallback,\n} from './definitions';\nimport { Encoding } from './definitions';\n\nfunction resolve(path: string): string {\n  const posix = path.split('/').filter((item) => item !== '.');\n  const newPosix: string[] = [];\n\n  posix.forEach((item) => {\n    if (item === '..' && newPosix.length > 0 && newPosix[newPosix.length - 1] !== '..') {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n\n  return newPosix.join('/');\n}\nfunction isPathParent(parent: string, children: string): boolean {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n\n  return parent !== children && pathsA.every((value, index) => value === pathsB[index]);\n}\n\nexport class FilesystemWeb extends WebPlugin implements FilesystemPlugin {\n  readFileInChunks(_options: ReadFileInChunksOptions, _callback: ReadFileInChunksCallback): Promise<CallbackID> {\n    throw this.unavailable('Method not implemented.');\n  }\n  DB_VERSION = 1;\n  DB_NAME = 'Disc';\n\n  private _writeCmds: string[] = ['add', 'put', 'delete'];\n  private _db?: IDBDatabase;\n  static _debug = true;\n  async initDb(): Promise<IDBDatabase> {\n    if (this._db !== undefined) {\n      return this._db;\n    }\n    if (!('indexedDB' in window)) {\n      throw this.unavailable(\"This browser doesn't support IndexedDB\");\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n      request.onupgradeneeded = FilesystemWeb.doUpgrade;\n      request.onsuccess = () => {\n        this._db = request.result;\n        resolve(request.result);\n      };\n      request.onerror = () => reject(request.error);\n      request.onblocked = () => {\n        console.warn('db blocked');\n      };\n    });\n  }\n\n  static doUpgrade(event: IDBVersionChangeEvent): void {\n    const eventTarget = event.target as IDBOpenDBRequest;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default: {\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n        const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n        store.createIndex('by_folder', 'folder');\n      }\n    }\n  }\n\n  async dbRequest(cmd: string, args: any[]): Promise<any> {\n    const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: any = tx.objectStore('FileStorage');\n        const req = store[cmd](...args);\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  async dbIndexRequest(indexName: string, cmd: string, args: [any]): Promise<any> {\n    const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: IDBObjectStore = tx.objectStore('FileStorage');\n        const index: any = store.index(indexName);\n        const req = index[cmd](...args) as any;\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  private getPath(directory: Directory | undefined, uriPath: string | undefined): string {\n    const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n\n  async clear(): Promise<void> {\n    const conn: IDBDatabase = await this.initDb();\n    const tx: IDBTransaction = conn.transaction(['FileStorage'], 'readwrite');\n    const store: IDBObjectStore = tx.objectStore('FileStorage');\n    store.clear();\n  }\n\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  async readFile(options: ReadFileOptions): Promise<ReadFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    // const encoding = options.encoding;\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    return { data: entry.content ? entry.content : '' };\n  }\n\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  async writeFile(options: WriteFileOptions): Promise<WriteFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const doRecursive = options.recursive;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory') throw Error('The supplied path is a directory.');\n\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive,\n        });\n      }\n    }\n\n    if (!encoding && !(data instanceof Blob)) {\n      data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n      if (!this.isBase64String(data)) throw Error('The supplied data is not valid base64 content.');\n    }\n\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data instanceof Blob ? data.size : data.length,\n      ctime: now,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n    return {\n      uri: pathObj.path,\n    };\n  }\n\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  async appendFile(options: AppendFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const now = Date.now();\n    let ctime = now;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory') throw Error('The supplied path is a directory.');\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: true,\n        });\n      }\n    }\n\n    if (!encoding && !this.isBase64String(data)) throw Error('The supplied data is not valid base64 content.');\n\n    if (occupiedEntry !== undefined) {\n      if (occupiedEntry.content instanceof Blob) {\n        throw Error('The occupied entry contains a Blob object which cannot be appended to.');\n      }\n\n      if (occupiedEntry.content !== undefined && !encoding) {\n        data = btoa(atob(occupiedEntry.content) + atob(data));\n      } else {\n        data = occupiedEntry.content + data;\n      }\n      ctime = occupiedEntry.ctime;\n    }\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: ctime,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n    if (entries.length !== 0) throw Error('Folder is not empty.');\n\n    await this.dbRequest('delete', [path]);\n  }\n\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  async mkdir(options: MkdirOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    const doRecursive = options.recursive;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const depth = (path.match(/\\//g) || []).length;\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (depth === 1) throw Error('Cannot create Root directory');\n    if (occupiedEntry !== undefined) throw Error('Current directory does already exist.');\n    if (!doRecursive && depth !== 2 && parentEntry === undefined) throw Error('Parent directory must exist');\n\n    if (doRecursive && depth !== 2 && parentEntry === undefined) {\n      const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n      await this.mkdir({\n        path: parentArgPath,\n        directory: options.directory,\n        recursive: doRecursive,\n      });\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'directory',\n      size: 0,\n      ctime: now,\n      mtime: now,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  async rmdir(options: RmdirOptions): Promise<void> {\n    const { path, directory, recursive } = options;\n    const fullPath: string = this.getPath(directory, path);\n\n    const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n\n    if (entry === undefined) throw Error('Folder does not exist.');\n\n    if (entry.type !== 'directory') throw Error('Requested path is not a directory');\n\n    const readDirResult = await this.readdir({ path, directory });\n\n    if (readDirResult.files.length !== 0 && !recursive) throw Error('Folder is not empty');\n\n    for (const entry of readDirResult.files) {\n      const entryPath = `${path}/${entry.name}`;\n      const entryObj = await this.stat({ path: entryPath, directory });\n      if (entryObj.type === 'file') {\n        await this.deleteFile({ path: entryPath, directory });\n      } else {\n        await this.rmdir({ path: entryPath, directory, recursive });\n      }\n    }\n\n    await this.dbRequest('delete', [fullPath]);\n  }\n\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  async readdir(options: ReaddirOptions): Promise<ReaddirResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (options.path !== '' && entry === undefined) throw Error('Folder does not exist.');\n\n    const entries: string[] = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n    const files = await Promise.all(\n      entries.map(async (e) => {\n        let subEntry = (await this.dbRequest('get', [e])) as EntryObj;\n        if (subEntry === undefined) {\n          subEntry = (await this.dbRequest('get', [e + '/'])) as EntryObj;\n        }\n        return {\n          name: e.substring(path.length + 1),\n          type: subEntry.type,\n          size: subEntry.size,\n          ctime: subEntry.ctime,\n          mtime: subEntry.mtime,\n          uri: subEntry.path,\n        };\n      }),\n    );\n    return { files: files };\n  }\n\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async getUri(options: GetUriOptions): Promise<GetUriResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    return {\n      uri: entry?.path || path,\n    };\n  }\n\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async stat(options: StatOptions): Promise<StatResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    if (entry === undefined) throw Error('Entry does not exist.');\n\n    return {\n      name: entry.path.substring(path.length + 1),\n      type: entry.type,\n      size: entry.size,\n      ctime: entry.ctime,\n      mtime: entry.mtime,\n      uri: entry.path,\n    };\n  }\n\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  async rename(options: RenameOptions): Promise<void> {\n    await this._copy(options, true);\n    return;\n  }\n\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  async copy(options: CopyOptions): Promise<CopyResult> {\n    return this._copy(options, false);\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  private async _copy(options: CopyOptions, doRename = false): Promise<CopyResult> {\n    let { toDirectory } = options;\n    const { to, from, directory: fromDirectory } = options;\n\n    if (!to || !from) {\n      throw Error('Both to and from must be provided');\n    }\n\n    // If no \"to\" directory is provided, use the \"from\" directory\n    if (!toDirectory) {\n      toDirectory = fromDirectory;\n    }\n\n    const fromPath = this.getPath(fromDirectory, from);\n    const toPath = this.getPath(toDirectory, to);\n\n    // Test that the \"to\" and \"from\" locations are different\n    if (fromPath === toPath) {\n      return {\n        uri: toPath,\n      };\n    }\n\n    if (isPathParent(fromPath, toPath)) {\n      throw Error('To path cannot contain the from path');\n    }\n\n    // Check the state of the \"to\" location\n    let toObj;\n    try {\n      toObj = await this.stat({\n        path: to,\n        directory: toDirectory,\n      });\n    } catch (e) {\n      // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n      const toPathComponents = to.split('/');\n      toPathComponents.pop();\n      const toPath = toPathComponents.join('/');\n\n      // Check the containing directory of the \"to\" location exists\n      if (toPathComponents.length > 0) {\n        const toParentDirectory = await this.stat({\n          path: toPath,\n          directory: toDirectory,\n        });\n\n        if (toParentDirectory.type !== 'directory') {\n          throw new Error('Parent directory of the to path is a file');\n        }\n      }\n    }\n\n    // Cannot overwrite a directory\n    if (toObj && toObj.type === 'directory') {\n      throw new Error('Cannot overwrite a directory with a file');\n    }\n\n    // Ensure the \"from\" object exists\n    const fromObj = await this.stat({\n      path: from,\n      directory: fromDirectory,\n    });\n\n    // Set the mtime/ctime of the supplied path\n    const updateTime = async (path: string, ctime: number, mtime: number) => {\n      const fullPath: string = this.getPath(toDirectory, path);\n      const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n      entry.ctime = ctime;\n      entry.mtime = mtime;\n      await this.dbRequest('put', [entry]);\n    };\n\n    const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n    switch (fromObj.type) {\n      // The \"from\" object is a file\n      case 'file': {\n        // Read the file\n        const file = await this.readFile({\n          path: from,\n          directory: fromDirectory,\n        });\n\n        // Optionally remove the file\n        if (doRename) {\n          await this.deleteFile({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n\n        let encoding;\n        if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {\n          encoding = Encoding.UTF8;\n        }\n\n        // Write the file to the new location\n        const writeResult = await this.writeFile({\n          path: to,\n          directory: toDirectory,\n          data: file.data,\n          encoding: encoding,\n        });\n\n        // Copy the mtime/ctime of a renamed file\n        if (doRename) {\n          await updateTime(to, ctime, fromObj.mtime);\n        }\n\n        // Resolve promise\n        return writeResult;\n      }\n      case 'directory': {\n        if (toObj) {\n          throw Error('Cannot move a directory over an existing object');\n        }\n\n        try {\n          // Create the to directory\n          await this.mkdir({\n            path: to,\n            directory: toDirectory,\n            recursive: false,\n          });\n\n          // Copy the mtime/ctime of a renamed directory\n          if (doRename) {\n            await updateTime(to, ctime, fromObj.mtime);\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // Iterate over the contents of the from location\n        const contents = (\n          await this.readdir({\n            path: from,\n            directory: fromDirectory,\n          })\n        ).files;\n\n        for (const filename of contents) {\n          // Move item from the from directory to the to directory\n          await this._copy(\n            {\n              from: `${from}/${filename.name}`,\n              to: `${to}/${filename.name}`,\n              directory: fromDirectory,\n              toDirectory,\n            },\n            doRename,\n          );\n        }\n\n        // Optionally remove the original from directory\n        if (doRename) {\n          await this.rmdir({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n      }\n    }\n    return {\n      uri: toPath,\n    };\n  }\n\n  /**\n   * Function that performs a http request to a server and downloads the file to the specified destination\n   *\n   * @deprecated Use the @capacitor/file-transfer plugin instead.\n   * @param options the options for the download operation\n   * @returns a promise that resolves with the download file result\n   */\n  public downloadFile = async (options: DownloadFileOptions): Promise<DownloadFileResult> => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const response = await fetch(options.url, requestInit);\n    let blob: Blob;\n\n    if (!options.progress) blob = await response.blob();\n    else if (!response?.body) blob = new Blob();\n    else {\n      const reader = response.body.getReader();\n\n      let bytes = 0;\n      const chunks: (Uint8Array | undefined)[] = [];\n\n      const contentType: string | null = response.headers.get('content-type');\n      const contentLength: number = parseInt(response.headers.get('content-length') || '0', 10);\n\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) break;\n\n        chunks.push(value);\n        bytes += value?.length || 0;\n\n        const status: ProgressStatus = {\n          url: options.url,\n          bytes,\n          contentLength,\n        };\n\n        this.notifyListeners('progress', status);\n      }\n\n      const allChunks = new Uint8Array(bytes);\n      let position = 0;\n      for (const chunk of chunks) {\n        if (typeof chunk === 'undefined') continue;\n\n        allChunks.set(chunk, position);\n        position += chunk.length;\n      }\n\n      blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n    }\n\n    const result = await this.writeFile({\n      path: options.path,\n      directory: options.directory ?? undefined,\n      recursive: options.recursive ?? false,\n      data: blob,\n    });\n\n    return { path: result.uri, blob };\n  };\n\n  private isBase64String(str: string): boolean {\n    try {\n      return btoa(atob(str)) == str;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\ninterface EntryObj {\n  path: string;\n  folder: string;\n  type: 'directory' | 'file';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri?: string;\n  content?: string | Blob;\n}\n"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","DB_VERSION","DB_NAME","_writeCmds","downloadFile","options","requestInit","buildRequestInit","webFetchExtra","fetch","url","response","progress","blob","body","Blob","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","read","done","status","notifyListeners","allChunks","Uint8Array","position","chunk","set","buffer","type","undefined","writeFile","directory","_a","recursive","_b","data","result","uri","_options","_callback","this","unavailable","_db","window","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","onerror","error","onblocked","console","warn","cmd","args","readFlag","indexOf","initDb","then","conn","store","transaction","objectStore","req","indexName","uriPath","cleanedUriPath","replace","fsPath","tx","clear","getPath","dbRequest","entry","Error","content","encoding","doRecursive","occupiedEntry","parentPath","substr","lastIndexOf","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","btoa","atob","dbIndexRequest","IDBKeyRange","only","depth","match","parentEntry","fullPath","readdir","readDirResult","files","entryPath","name","stat","deleteFile","rmdir","entries","all","map","e","subEntry","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","fromObj","updateTime","readFile","file","Encoding","writeResult","contents","filename","str","err","event","db","target","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","WebPlugin"],"sourceRoot":""}